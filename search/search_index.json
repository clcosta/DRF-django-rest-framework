{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bem vindo ao projeto Django Rest Framework Esse projeto tem o intuito de criar uma API REST simples, com JWT como m\u00e9todo de seguran\u00e7a. Sendo assim ela n\u00e3o tem o objetivo de ser um projeto ou sistema complexo, apenas uma experi\u00eancia com o framework, toda a construi\u00e7\u00e3o do banco de dados/modelos est\u00e1 com uma f\u00e1cil visualiza\u00e7\u00e3o no painel Admin do django. Redes Sociais Site Instagram Linkedin Instala\u00e7\u00e3o Primeiramente voc\u00ea pode clonar este reposit\u00f3rio. $ git clone https://github.com/clcosta/DRF-django-rest-framewok.git Agora a instala\u00e7\u00e3o das bibliotecas pip install -r requirements.txt Como utilizar Com tudo j\u00e1 instalado precisamos iniciar o banco de dados ! python manage.py makemigrations python manage.py migrate - Agora precisamos de um usuario ou superuser ! python manage.py createsuperuser - Agora s\u00f3 iniciar o servidor! python manage.py runserver Token e Auth O sistema de Autentica\u00e7\u00e3o da API funciona atrav\u00e9s de tokens, no modelo JWT . Para as requisi\u00e7\u00f5es serem executadas com exito \u00e9 necess\u00e1rio passar um token na requisi\u00e7\u00e3o no formato de Bearer Token . Pegando o Token 1 2 3 4 5 6 7 8 9 10 import requests url = \"http://localhost:8000/token/\" payload = { \"username\" : \"SEU USERNAME\" , \"password\" : \"SUA PASSWORD\" } response = requests . post ( url , data = payload ) OUTPUT { \"refresh\" : \"REFRESH TOKEN\" , \"access\" : \"ACCESS TOKEN\" } Token Expired O Token obtido na requisi\u00e7\u00e3o acima tem um limite de tempo que pode ser alterado nas configura\u00e7\u00f5es do projeto DRF/settings.py , seguindo todas as instru\u00e7\u00f5es da documenta\u00e7\u00e3o e suas vari\u00e1veis. Caso seu token tenha expirado \u00e9 so fazer um POST no end-point /token/refresh/ passando o payload {\"refresh\":REFRESH TOKEN} , a resposta ser\u00e1 um novo access token. End-Points Modelo End Point Token M\u00e9todo Alunos /api/alunos SIM GET - POST - PUT - DELETE Professores /api/professores SIM GET - POST - PUT - DELETE Turmas /api/turmas SIM GET - PUT - DELETE Modelos da API Modelo Alunos class escola.models.Aluno Fields Nome (nome) Required, max_length = 30. CPF (cpf) Required, max_length = 14, unique = True, validators = #Sem valida\u00e7\u00e3o de cpf. Ano Escola (ano_escolar) Required, default = ANO_1, choices = Aluno.ano_escolar_choices. Modelo Professor class escola.models.Professor Fields Nome (nome) Required, max_length = 40. CPF (cpf) Required, max_length = 14, unique = True, validators = #Sem valida\u00e7\u00e3o de cpf. Mat\u00e9ria (materia) Required, max_length=50, choices = Aluno.materias_choices. Modelo Turma class escola.models.Turma Fields Nome (nome) Required, max_length = 25, default = \"3\u00b0 Ano A - Manh\u00e3\", unique = True. Professores (professor) [ManyToManyField] Required, model = Professor Alunos (alunos) [ManyToManyField] Required, model = Aluno Propertys qtd_alunos -> int return Quantidade de alunos dentro da turma qtd_professores -> int return Quantidade de professores dentro da turma lista_materias -> list return Lista de materias correspondente aos professores j\u00e1 cadastrados na turma lista_alunos -> list return Lista os alunos pelo nome lista_professores -> list return Lista os professores pelo nome Exemplos Alunos 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/alunos/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT [ { \"id\" : 1 , \"nome\" : \"aluno 0\" , \"cpf\" : \"000.000.000-00\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, { \"id\" : 2 , \"nome\" : \"aluno 1\" , \"cpf\" : \"111.111.111-11\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, ... ] Detalhes de um \u00fanico item (funciona para todos os modelos): 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/alunos/1/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT { \"id\" : 1 , \"nome\" : \"aluno 0\" , \"cpf\" : \"000.000.000-00\" , \"ano_escolar\" : \"1\u00b0 Ano\" } Professores 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/professores/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT [ { \"id\" : 1 , \"nome\" : \"professor 1\" , \"cpf\" : \"333.333.333-33\" , \"materia\" : \"Matem\u00e1tica\" }, { \"id\" : 2 , \"nome\" : \"professor 2\" , \"cpf\" : \"444.444.444-44\" , \"materia\" : \"Portugu\u00eas\" }, ... ] Turma 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/turmas/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT [ { \"id\" : 1 , \"nome\" : \"1\u00b0 Ano A - Tarde\" , \"qtd_alunos\" : 3 , \"qtd_professores\" : 2 , \"lista_materias\" : [ \"Matem\u00e1tica\" , \"Portugu\u00eas\" ], \"alunos\" : [ { \"id\" : 1 , \"nome\" : \"aluno 0\" , \"cpf\" : \"000.000.000-00\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, { \"id\" : 2 , \"nome\" : \"aluno 1\" , \"cpf\" : \"111.111.111-11\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, { \"id\" : 3 , \"nome\" : \"aluno 3\" , \"cpf\" : \"555.555.555-55\" , \"ano_escolar\" : \"1\u00b0 Ano\" } ], \"professores\" : [ { \"id\" : 1 , \"nome\" : \"professor 1\" , \"cpf\" : \"333.333.333-33\" , \"materia\" : \"Matem\u00e1tica\" }, { \"id\" : 2 , \"nome\" : \"professor 2\" , \"cpf\" : \"444.444.444-44\" , \"materia\" : \"Portugu\u00eas\" } ] }, ... ] Autor @clcostaf","title":"Django Rest Framework"},{"location":"#bem-vindo-ao-projeto-django-rest-framework","text":"Esse projeto tem o intuito de criar uma API REST simples, com JWT como m\u00e9todo de seguran\u00e7a. Sendo assim ela n\u00e3o tem o objetivo de ser um projeto ou sistema complexo, apenas uma experi\u00eancia com o framework, toda a construi\u00e7\u00e3o do banco de dados/modelos est\u00e1 com uma f\u00e1cil visualiza\u00e7\u00e3o no painel Admin do django.","title":"Bem vindo ao projeto Django Rest Framework"},{"location":"#redes-sociais","text":"Site Instagram Linkedin","title":"Redes Sociais"},{"location":"#instalacao","text":"Primeiramente voc\u00ea pode clonar este reposit\u00f3rio. $ git clone https://github.com/clcosta/DRF-django-rest-framewok.git Agora a instala\u00e7\u00e3o das bibliotecas pip install -r requirements.txt","title":"Instala\u00e7\u00e3o"},{"location":"#como-utilizar","text":"Com tudo j\u00e1 instalado precisamos iniciar o banco de dados ! python manage.py makemigrations python manage.py migrate - Agora precisamos de um usuario ou superuser ! python manage.py createsuperuser - Agora s\u00f3 iniciar o servidor! python manage.py runserver","title":"Como utilizar"},{"location":"#token-e-auth","text":"O sistema de Autentica\u00e7\u00e3o da API funciona atrav\u00e9s de tokens, no modelo JWT . Para as requisi\u00e7\u00f5es serem executadas com exito \u00e9 necess\u00e1rio passar um token na requisi\u00e7\u00e3o no formato de Bearer Token .","title":"Token e Auth"},{"location":"#pegando-o-token","text":"1 2 3 4 5 6 7 8 9 10 import requests url = \"http://localhost:8000/token/\" payload = { \"username\" : \"SEU USERNAME\" , \"password\" : \"SUA PASSWORD\" } response = requests . post ( url , data = payload ) OUTPUT { \"refresh\" : \"REFRESH TOKEN\" , \"access\" : \"ACCESS TOKEN\" } Token Expired O Token obtido na requisi\u00e7\u00e3o acima tem um limite de tempo que pode ser alterado nas configura\u00e7\u00f5es do projeto DRF/settings.py , seguindo todas as instru\u00e7\u00f5es da documenta\u00e7\u00e3o e suas vari\u00e1veis. Caso seu token tenha expirado \u00e9 so fazer um POST no end-point /token/refresh/ passando o payload {\"refresh\":REFRESH TOKEN} , a resposta ser\u00e1 um novo access token.","title":"Pegando o Token"},{"location":"#end-points","text":"Modelo End Point Token M\u00e9todo Alunos /api/alunos SIM GET - POST - PUT - DELETE Professores /api/professores SIM GET - POST - PUT - DELETE Turmas /api/turmas SIM GET - PUT - DELETE","title":"End-Points"},{"location":"#modelos-da-api","text":"","title":"Modelos da API"},{"location":"#modelo-alunos","text":"class escola.models.Aluno Fields Nome (nome) Required, max_length = 30. CPF (cpf) Required, max_length = 14, unique = True, validators = #Sem valida\u00e7\u00e3o de cpf. Ano Escola (ano_escolar) Required, default = ANO_1, choices = Aluno.ano_escolar_choices.","title":"Modelo Alunos"},{"location":"#modelo-professor","text":"class escola.models.Professor Fields Nome (nome) Required, max_length = 40. CPF (cpf) Required, max_length = 14, unique = True, validators = #Sem valida\u00e7\u00e3o de cpf. Mat\u00e9ria (materia) Required, max_length=50, choices = Aluno.materias_choices.","title":"Modelo Professor"},{"location":"#modelo-turma","text":"class escola.models.Turma Fields Nome (nome) Required, max_length = 25, default = \"3\u00b0 Ano A - Manh\u00e3\", unique = True. Professores (professor) [ManyToManyField] Required, model = Professor Alunos (alunos) [ManyToManyField] Required, model = Aluno Propertys qtd_alunos -> int return Quantidade de alunos dentro da turma qtd_professores -> int return Quantidade de professores dentro da turma lista_materias -> list return Lista de materias correspondente aos professores j\u00e1 cadastrados na turma lista_alunos -> list return Lista os alunos pelo nome lista_professores -> list return Lista os professores pelo nome","title":"Modelo Turma"},{"location":"#exemplos","text":"Alunos 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/alunos/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT [ { \"id\" : 1 , \"nome\" : \"aluno 0\" , \"cpf\" : \"000.000.000-00\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, { \"id\" : 2 , \"nome\" : \"aluno 1\" , \"cpf\" : \"111.111.111-11\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, ... ] Detalhes de um \u00fanico item (funciona para todos os modelos): 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/alunos/1/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT { \"id\" : 1 , \"nome\" : \"aluno 0\" , \"cpf\" : \"000.000.000-00\" , \"ano_escolar\" : \"1\u00b0 Ano\" } Professores 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/professores/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT [ { \"id\" : 1 , \"nome\" : \"professor 1\" , \"cpf\" : \"333.333.333-33\" , \"materia\" : \"Matem\u00e1tica\" }, { \"id\" : 2 , \"nome\" : \"professor 2\" , \"cpf\" : \"444.444.444-44\" , \"materia\" : \"Portugu\u00eas\" }, ... ] Turma 1 2 3 4 5 6 7 8 9 10 11 12 import requests url = \"http://localhost:8000/api/turmas/\" header_token = { \"Accept\" : \"YOUR ACCEPT\" , \"User-Agent\" : \"YOUR USER AGENT\" , \"Authorization\" : \"Bearer YOUR TOKEN ACCESS HERE\" } response = requests . get ( url , header = header_token ) print ( response ) OUTPUT [ { \"id\" : 1 , \"nome\" : \"1\u00b0 Ano A - Tarde\" , \"qtd_alunos\" : 3 , \"qtd_professores\" : 2 , \"lista_materias\" : [ \"Matem\u00e1tica\" , \"Portugu\u00eas\" ], \"alunos\" : [ { \"id\" : 1 , \"nome\" : \"aluno 0\" , \"cpf\" : \"000.000.000-00\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, { \"id\" : 2 , \"nome\" : \"aluno 1\" , \"cpf\" : \"111.111.111-11\" , \"ano_escolar\" : \"1\u00b0 Ano\" }, { \"id\" : 3 , \"nome\" : \"aluno 3\" , \"cpf\" : \"555.555.555-55\" , \"ano_escolar\" : \"1\u00b0 Ano\" } ], \"professores\" : [ { \"id\" : 1 , \"nome\" : \"professor 1\" , \"cpf\" : \"333.333.333-33\" , \"materia\" : \"Matem\u00e1tica\" }, { \"id\" : 2 , \"nome\" : \"professor 2\" , \"cpf\" : \"444.444.444-44\" , \"materia\" : \"Portugu\u00eas\" } ] }, ... ]","title":"Exemplos"},{"location":"#autor","text":"@clcostaf","title":"Autor"}]}